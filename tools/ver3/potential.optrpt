Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: potential::potential(potential *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(348,7) inlined into potential.cpp(13,20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 354 and gen._M_x line 350
LOOP END

LOOP BEGIN at potential.cpp(16,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(18,32)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(18,32)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(18,32)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(18,32)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(19,32)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(19,32)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(19,32)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(19,32)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(20,32)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(20,32)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(20,32)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(20,32)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(21,39)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(21,39)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(21,39)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(21,39)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: potential::potential(potential *const, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(348,7) inlined into potential.cpp(3,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 354 and gen._M_x line 350
LOOP END

LOOP BEGIN at potential.cpp(16,3) inlined into potential.cpp(3,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(3,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(3,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(3,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(3,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(3,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(3,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(2819,7) inlined into potential.cpp(3,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.176
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 26 
         remark #15477: vector loop cost: 4.250 
         remark #15478: estimated potential speedup: 5.690 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(422,4) inlined into potential.cpp(3,14)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(425,30) ]
         remark #15388: vectorization support: reference gen._M_x has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15389: vectorization support: reference gen._M_x has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(426,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.156
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/random.tcc(430,4) inlined into potential.cpp(3,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x line 434 and gen._M_x line 434
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x line 434 and gen._M_x line 434
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: potential::CalculateGravitationalPotential(potential *, int, int, int, real_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at potential.cpp(31,3)
<Peeled loop for vectorization>
   remark #15336: peel loop was not vectorized: conditional assignment to a scalar   [ potential.cpp(38,5) ]
LOOP END

LOOP BEGIN at potential.cpp(31,3)
   remark #15389: vectorization support: reference this has unaligned access   [ potential.cpp(33,60) ]
   remark #15389: vectorization support: reference this has unaligned access   [ potential.cpp(34,60) ]
   remark #15389: vectorization support: reference this has unaligned access   [ potential.cpp(35,60) ]
   remark #15388: vectorization support: reference this has aligned access   [ potential.cpp(38,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.281
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 90 
   remark #15477: vector loop cost: 11.120 
   remark #15478: estimated potential speedup: 7.500 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at potential.cpp(31,3)
<Remainder loop for vectorization>
   remark #15336: remainder loop was not vectorized: conditional assignment to a scalar   [ potential.cpp(38,5) ]
LOOP END
===========================================================================
